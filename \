#include "olc6502.h"
#include "bus.h"

void olc6502::write(uint16_t addr, uint8_t data) { bus->write(addr, data); }
uint8_t olc6502::read(uint16_t addr) {
  bus->read(addr);
  return 0
}

void olc6502::clock() {
  if (cycles == 0) {
    opcode = read(pc++);
    cycles = lookup[opcode].clock_cycles_required;
    uint8_t cycles_for_address = (*this->lookup[opcode].address_mode_prep)();
    uint8_t cycles_for_ops = (*this->lookup[opcode].operate)();
    cycles = cycles_for_address + cycles_for_ops;
  }
  cycles--;
};
uint8_t olc6502::fetch() { fetched = read(pc++); }

// ADDRESS MODES
// read next byte value
uint8_t olc6502::IMM() {
  addr = pc++;
  return 0;
};

// no data needed;
uint8_t olc6502::IMP() {
  fetched = a;
  return 0;
}

// OPCODES
// load into accumulator
uint8_t olc6502::LDA() {
  fetch();
  a = fetched;
  return 0;
};

// ZP0 with X offset
uint8_t olc6502::ZPX() {
  addr = read(pc + x);
  pc++;
  return 0;
}

// only take offset (low) bytes as address -> optimize speed
uint8_t olc6502::ZP0() {
  addr = read(pc++);
  return 0;
};

// ZP0 with Y offset
uint8_t olc6502::ZPY() {
  addr = read(pc + y);
  pc++;
  return 0;
}

// return 16 bit address
uint8_t olc6502::ABS() {
  uint8_t high = read(pc++);
  uint8_t low = read(pc++);
  addr = (high << 8) | low;
  return 0;
}

// ABS with X offset
uint8_t olc6502::ABX() {
  uint8_t high = read(pc++);
  uint8_t low = read(pc++);
  addr = (high << 8) | low + x;
  return 0;
}
